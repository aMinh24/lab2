// <auto-generated />
using System;
using Lab2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab2.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Lab2.Models.BlogPost", b =>
                {
                    b.Property<int>("BlogPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogPostId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("Lab2.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderChap")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ChapterId");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Lab2.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Lab2.Models.Discussion", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscussionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DiscussionId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("Lab2.Models.DiscussionReply", b =>
                {
                    b.Property<int>("DiscussionReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscussionReplyId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DiscussionReplyId");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("UserId");

                    b.ToTable("DiscussionReplies");
                });

            modelBuilder.Entity("Lab2.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkFacebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkTwitter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstructorId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Lab2.Models.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstimateTime")
                        .HasColumnType("float");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("OrderLesson")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonId");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Lab2.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hide")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<string>("Span")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(818),
                            Hide = false,
                            Icon = "home",
                            Link = "",
                            Meta = "home_meta",
                            Name = "Home",
                            Order = 1,
                            ParentMenuId = 1,
                            Span = "Home"
                        },
                        new
                        {
                            Id = 2,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(827),
                            Hide = false,
                            Icon = "local_library",
                            Link = "courses",
                            Meta = "courses_meta",
                            Name = "Browse Courses",
                            Order = 2,
                            ParentMenuId = 1,
                            Span = "Browse Courses"
                        },
                        new
                        {
                            Id = 3,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(831),
                            Hide = false,
                            Icon = "style",
                            Link = "paths",
                            Meta = "paths_meta",
                            Name = "Browse Paths",
                            Order = 3,
                            ParentMenuId = 1,
                            Span = "Browse Paths"
                        },
                        new
                        {
                            Id = 4,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(834),
                            Hide = false,
                            Icon = "account_box",
                            Link = "dashboard",
                            Meta = "dashboard_meta",
                            Name = "Student Dashboard",
                            Order = 4,
                            ParentMenuId = 1,
                            Span = "Student Dashboard"
                        },
                        new
                        {
                            Id = 5,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(836),
                            Hide = false,
                            Icon = "search",
                            Link = "mycourse",
                            Meta = "my_courses_meta",
                            Name = "My Courses",
                            Order = 5,
                            ParentMenuId = 1,
                            Span = "My Courses"
                        },
                        new
                        {
                            Id = 6,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(839),
                            Hide = false,
                            Icon = "timeline",
                            Link = "mypaths",
                            Meta = "my_paths_meta",
                            Name = "My Paths",
                            Order = 6,
                            ParentMenuId = 1,
                            Span = "My Paths"
                        },
                        new
                        {
                            Id = 7,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(842),
                            Hide = false,
                            Icon = "change_history",
                            Link = "pathdetail",
                            Meta = "path_details_meta",
                            Name = "Path Details",
                            Order = 7,
                            ParentMenuId = 1,
                            Span = "Path Details"
                        },
                        new
                        {
                            Id = 8,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(846),
                            Hide = false,
                            Icon = "face",
                            Link = "courseprview",
                            Meta = "course_preview_meta",
                            Name = "Course Preview",
                            Order = 8,
                            ParentMenuId = 1,
                            Span = "Course Preview"
                        },
                        new
                        {
                            Id = 9,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(849),
                            Hide = false,
                            Icon = "panorama_fish_eye",
                            Link = "lesson",
                            Meta = "lesson_preview_meta",
                            Name = "Lesson Preview",
                            Order = 9,
                            ParentMenuId = 1,
                            Span = "Lesson Preview"
                        },
                        new
                        {
                            Id = 10,
                            Badge = "PRO",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(851),
                            Hide = false,
                            Icon = "class",
                            Link = "student-take-course.html",
                            Meta = "take_course_meta",
                            Name = "Take Course",
                            Order = 10,
                            ParentMenuId = 1,
                            Span = "Take Course"
                        },
                        new
                        {
                            Id = 11,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(855),
                            Hide = false,
                            Icon = "import_contacts",
                            Link = "student-take-lesson.html",
                            Meta = "take_lesson_meta",
                            Name = "Take Lesson",
                            Order = 11,
                            ParentMenuId = 1,
                            Span = "Take Lesson"
                        },
                        new
                        {
                            Id = 12,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(858),
                            Hide = false,
                            Icon = "dvr",
                            Link = "student-take-quiz.html",
                            Meta = "take_quiz_meta",
                            Name = "Take Quiz",
                            Order = 12,
                            ParentMenuId = 1,
                            Span = "Take Quiz"
                        },
                        new
                        {
                            Id = 13,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(860),
                            Hide = false,
                            Icon = "poll",
                            Link = "student-quiz-results.html",
                            Meta = "my_quizzes_meta",
                            Name = "My Quizzes",
                            Order = 13,
                            ParentMenuId = 1,
                            Span = "My Quizzes"
                        },
                        new
                        {
                            Id = 14,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(862),
                            Hide = false,
                            Icon = "live_help",
                            Link = "student-quiz-result-details.html",
                            Meta = "quiz_result_meta",
                            Name = "Quiz Result",
                            Order = 14,
                            ParentMenuId = 1,
                            Span = "Quiz Result"
                        },
                        new
                        {
                            Id = 15,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(864),
                            Hide = false,
                            Icon = "layers",
                            Link = "student-path-assessment.html",
                            Meta = "skill_assessment_meta",
                            Name = "Skill Assessment",
                            Order = 15,
                            ParentMenuId = 1,
                            Span = "Skill Assessment"
                        },
                        new
                        {
                            Id = 16,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(867),
                            Hide = false,
                            Icon = "assignment_turned_in",
                            Link = "student-path-assessment-result.html",
                            Meta = "skill_result_meta",
                            Name = "Skill Result",
                            Order = 16,
                            ParentMenuId = 1,
                            Span = "Skill Result"
                        },
                        new
                        {
                            Id = 17,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(869),
                            Hide = false,
                            Icon = "school",
                            Link = "instructor-dashboard.html",
                            Meta = "instructor_dashboard_meta",
                            Name = "Instructor Dashboard",
                            Order = 1,
                            ParentMenuId = 2,
                            Span = "Instructor Dashboard"
                        },
                        new
                        {
                            Id = 18,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(872),
                            Hide = false,
                            Icon = "import_contacts",
                            Link = "instructor-courses.html",
                            Meta = "manage_courses_meta",
                            Name = "Manage Courses",
                            Order = 2,
                            ParentMenuId = 2,
                            Span = "Manage Courses"
                        },
                        new
                        {
                            Id = 19,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(874),
                            Hide = false,
                            Icon = "help",
                            Link = "instructor-quizzes.html",
                            Meta = "manage_quizzes_meta",
                            Name = "Manage Quizzes",
                            Order = 3,
                            ParentMenuId = 2,
                            Span = "Manage Quizzes"
                        },
                        new
                        {
                            Id = 20,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(877),
                            Hide = false,
                            Icon = "trending_up",
                            Link = "instructor-earnings.html",
                            Meta = "earnings_meta",
                            Name = "Earnings",
                            Order = 4,
                            ParentMenuId = 2,
                            Span = "Earnings"
                        },
                        new
                        {
                            Id = 21,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(879),
                            Hide = false,
                            Icon = "receipt",
                            Link = "instructor-statement.html",
                            Meta = "statement_meta",
                            Name = "Statement",
                            Order = 5,
                            ParentMenuId = 2,
                            Span = "Statement"
                        },
                        new
                        {
                            Id = 22,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(882),
                            Hide = false,
                            Icon = "post_add",
                            Link = "instructor-edit-course.html",
                            Meta = "edit_course_meta",
                            Name = "Edit Course",
                            Order = 6,
                            ParentMenuId = 2,
                            Span = "Edit Course"
                        },
                        new
                        {
                            Id = 23,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(885),
                            Hide = false,
                            Icon = "format_shapes",
                            Link = "instructor-edit-quiz.html",
                            Meta = "edit_quiz_meta",
                            Name = "Edit Quiz",
                            Order = 7,
                            ParentMenuId = 2,
                            Span = "Edit Quiz"
                        },
                        new
                        {
                            Id = 24,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(887),
                            Hide = false,
                            Icon = "",
                            Link = "pricing.html",
                            Meta = "pricing_meta",
                            Name = "Pricing",
                            Order = 1,
                            ParentMenuId = 5,
                            Span = "Pricing"
                        },
                        new
                        {
                            Id = 25,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(889),
                            Hide = false,
                            Icon = "",
                            Link = "login.html",
                            Meta = "login_meta",
                            Name = "Login",
                            Order = 2,
                            ParentMenuId = 5,
                            Span = "Login"
                        },
                        new
                        {
                            Id = 26,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(891),
                            Hide = false,
                            Icon = "",
                            Link = "signup.html",
                            Meta = "signup_meta",
                            Name = "Signup",
                            Order = 3,
                            ParentMenuId = 5,
                            Span = "Signup"
                        },
                        new
                        {
                            Id = 27,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(894),
                            Hide = false,
                            Icon = "",
                            Link = "signup-payment.html",
                            Meta = "payment_meta",
                            Name = "Payment",
                            Order = 4,
                            ParentMenuId = 5,
                            Span = "Payment"
                        },
                        new
                        {
                            Id = 28,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(896),
                            Hide = false,
                            Icon = "",
                            Link = "reset-password.html",
                            Meta = "reset_password_meta",
                            Name = "Reset Password",
                            Order = 5,
                            ParentMenuId = 5,
                            Span = "Reset Password"
                        },
                        new
                        {
                            Id = 29,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(898),
                            Hide = false,
                            Icon = "",
                            Link = "change-password.html",
                            Meta = "change_password_meta",
                            Name = "Change Password",
                            Order = 6,
                            ParentMenuId = 5,
                            Span = "Change Password"
                        },
                        new
                        {
                            Id = 30,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(900),
                            Hide = false,
                            Icon = "",
                            Link = "edit-account.html",
                            Meta = "edit_account_meta",
                            Name = "Edit Account",
                            Order = 7,
                            ParentMenuId = 5,
                            Span = "Edit Account"
                        },
                        new
                        {
                            Id = 31,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(902),
                            Hide = false,
                            Icon = "",
                            Link = "edit-account-profile.html",
                            Meta = "profile_privacy_meta",
                            Name = "Profile & Privacy",
                            Order = 8,
                            ParentMenuId = 5,
                            Span = "Profile & Privacy"
                        },
                        new
                        {
                            Id = 32,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(904),
                            Hide = false,
                            Icon = "",
                            Link = "edit-account-notifications.html",
                            Meta = "email_notifications_meta",
                            Name = "Email Notifications",
                            Order = 9,
                            ParentMenuId = 5,
                            Span = "Email Notifications"
                        },
                        new
                        {
                            Id = 33,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(907),
                            Hide = false,
                            Icon = "",
                            Link = "edit-account-password.html",
                            Meta = "account_password_meta",
                            Name = "Account Password",
                            Order = 10,
                            ParentMenuId = 5,
                            Span = "Account Password"
                        },
                        new
                        {
                            Id = 34,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(909),
                            Hide = false,
                            Icon = "",
                            Link = "billing.html",
                            Meta = "subscription_meta",
                            Name = "Subscription",
                            Order = 11,
                            ParentMenuId = 5,
                            Span = "Subscription"
                        },
                        new
                        {
                            Id = 35,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(912),
                            Hide = false,
                            Icon = "",
                            Link = "billing-upgrade.html",
                            Meta = "upgrade_account_meta",
                            Name = "Upgrade Account",
                            Order = 12,
                            ParentMenuId = 5,
                            Span = "Upgrade Account"
                        },
                        new
                        {
                            Id = 38,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(914),
                            Hide = false,
                            Icon = "",
                            Link = "billing-invoice.html",
                            Meta = "invoice_meta",
                            Name = "Invoice",
                            Order = 8,
                            ParentMenuId = 5,
                            Span = "Invoice"
                        },
                        new
                        {
                            Id = 39,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(916),
                            Hide = false,
                            Icon = "",
                            Link = "messages.html",
                            Meta = "messages_meta",
                            Name = "Messages",
                            Order = 1,
                            ParentMenuId = 4,
                            Span = "Messages"
                        },
                        new
                        {
                            Id = 40,
                            Badge = "",
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(921),
                            Hide = false,
                            Icon = "",
                            Link = "email.html",
                            Meta = "email_meta",
                            Name = "Email",
                            Order = 2,
                            ParentMenuId = 4,
                            Span = "Email"
                        });
                });

            modelBuilder.Entity("Lab2.Models.ParentMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hide")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Span")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ParentMenus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(608),
                            Hide = false,
                            Icon = "school",
                            Link = "sm_student",
                            Meta = "student",
                            Name = "Student",
                            Order = 1,
                            Span = "Student"
                        },
                        new
                        {
                            Id = 2,
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(612),
                            Hide = false,
                            Icon = "format_shapes",
                            Link = "sm_instructor",
                            Meta = "instructor",
                            Name = "Instructor",
                            Order = 2,
                            Span = "Instructor"
                        },
                        new
                        {
                            Id = 3,
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(616),
                            Hide = false,
                            Icon = "apps",
                            Link = "sm_apps",
                            Meta = "apps",
                            Name = "Apps",
                            Order = 3,
                            Span = "Apps"
                        },
                        new
                        {
                            Id = 4,
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(619),
                            Hide = false,
                            Icon = "message",
                            Link = "sm_messaging",
                            Meta = "messaging",
                            Name = "Messaging",
                            Order = 4,
                            Span = "Messaging"
                        },
                        new
                        {
                            Id = 5,
                            DateBegin = new DateTime(2024, 10, 19, 14, 32, 24, 241, DateTimeKind.Local).AddTicks(622),
                            Hide = false,
                            Icon = "account_box",
                            Link = "sm_account",
                            Meta = "account",
                            Name = "Account",
                            Order = 5,
                            Span = "Account"
                        });
                });

            modelBuilder.Entity("Lab2.Models.PaymentInformation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("bit");

                    b.Property<string>("CreditNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("PaymentInformations");
                });

            modelBuilder.Entity("Lab2.Models.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatformId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PlatformId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Lab2.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Lab2.Models.SubscriptionType", b =>
                {
                    b.Property<int>("SubscriptionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionTypeId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SubscriptionTypeId");

                    b.ToTable("SubscriptionTypes");
                });

            modelBuilder.Entity("Lab2.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Lab2.Models.UserCourse", b =>
                {
                    b.Property<int>("UserCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCourseId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("Lab2.Models.UserLesson", b =>
                {
                    b.Property<int>("UserLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLessonId"));

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserLessonId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLessons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Lab2.Models.BlogPost", b =>
                {
                    b.HasOne("Lab2.Models.AppUser", "User")
                        .WithMany("BlogPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lab2.Models.Chapter", b =>
                {
                    b.HasOne("Lab2.Models.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Lab2.Models.Course", b =>
                {
                    b.HasOne("Lab2.Models.AppUser", "Instructor")
                        .WithMany("CoursesInstructed")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab2.Models.Platform", "Platform")
                        .WithMany("Courses")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab2.Models.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Platform");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Lab2.Models.Discussion", b =>
                {
                    b.HasOne("Lab2.Models.Course", "Course")
                        .WithMany("Discussions")
                        .HasForeignKey("CourseId");

                    b.HasOne("Lab2.Models.Lesson", "Lesson")
                        .WithMany("Discussions")
                        .HasForeignKey("LessonId");

                    b.HasOne("Lab2.Models.AppUser", "User")
                        .WithMany("DiscussionsStarted")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lab2.Models.DiscussionReply", b =>
                {
                    b.HasOne("Lab2.Models.Discussion", "Discussion")
                        .WithMany("DiscussionReplies")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab2.Models.AppUser", "User")
                        .WithMany("DiscussionReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lab2.Models.Instructor", b =>
                {
                    b.HasOne("Lab2.Models.Topic", "PrimaryTopic")
                        .WithMany("Instructors")
                        .HasForeignKey("TopicId");

                    b.HasOne("Lab2.Models.AppUser", "AppUser")
                        .WithOne()
                        .HasForeignKey("Lab2.Models.Instructor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("PrimaryTopic");
                });

            modelBuilder.Entity("Lab2.Models.Lesson", b =>
                {
                    b.HasOne("Lab2.Models.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Lab2.Models.Menu", b =>
                {
                    b.HasOne("Lab2.Models.ParentMenu", "ParentMenu")
                        .WithMany("Menus")
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Lab2.Models.PaymentInformation", b =>
                {
                    b.HasOne("Lab2.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lab2.Models.Subscription", b =>
                {
                    b.HasOne("Lab2.Models.SubscriptionType", "SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab2.Models.AppUser", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lab2.Models.UserCourse", b =>
                {
                    b.HasOne("Lab2.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab2.Models.AppUser", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lab2.Models.UserLesson", b =>
                {
                    b.HasOne("Lab2.Models.Lesson", "Lesson")
                        .WithMany("UserLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab2.Models.AppUser", "User")
                        .WithMany("UserLessons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Lab2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Lab2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Lab2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lab2.Models.AppUser", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("CoursesInstructed");

                    b.Navigation("DiscussionReplies");

                    b.Navigation("DiscussionsStarted");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserCourses");

                    b.Navigation("UserLessons");
                });

            modelBuilder.Entity("Lab2.Models.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Lab2.Models.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Discussions");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("Lab2.Models.Discussion", b =>
                {
                    b.Navigation("DiscussionReplies");
                });

            modelBuilder.Entity("Lab2.Models.Lesson", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("UserLessons");
                });

            modelBuilder.Entity("Lab2.Models.ParentMenu", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Lab2.Models.Platform", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Lab2.Models.SubscriptionType", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Lab2.Models.Topic", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructors");
                });
#pragma warning restore 612, 618
        }
    }
}
